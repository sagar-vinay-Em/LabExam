tries:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ALPHABET_SIZE 26

// Trie Node
struct TrieNode {
    struct TrieNode* children[ALPHABET_SIZE];
    int isEndOfWord;
};

// Function to create a new Trie Node
struct TrieNode* createTrieNode() {
    struct TrieNode* newNode = (struct TrieNode*)malloc(sizeof(struct TrieNode));
    if (newNode) {
        newNode->isEndOfWord = 0;
        for (int i = 0; i < ALPHABET_SIZE; i++) {
            newNode->children[i] = NULL;
        }
    }
    return newNode;
}

// Function to insert a word into the Trie
void insert(struct TrieNode* root, const char* word) {
    struct TrieNode* node = root;
    int length = strlen(word);

    for (int level = 0; level < length; level++) {
        int index = word[level] - 'a';

        if (!node->children[index]) {
            node->children[index] = createTrieNode();
        }

        node = node->children[index];
    }

    node->isEndOfWord = 1; // Mark the end of the word
}

// Function to search for a word in the Trie
int search(struct TrieNode* root, const char* word) {
    struct TrieNode* node = root;
    int length = strlen(word);

    for (int level = 0; level < length; level++) {
        int index = word[level] - 'a';

        if (!node->children[index]) {
            return 0; // Word is not present in the Trie
        }

        node = node->children[index];
    }

    return (node != NULL && node->isEndOfWord);
}

int main() {
    const char* words[] = {"apple", "banana", "cherry", "date", "dog", "elephant", "zebra"};
    int numWords = sizeof(words) / sizeof(words[0]);

    struct TrieNode* root = createTrieNode();

    // Insert words into the Trie
    for (int i = 0; i < numWords; i++) {
        insert(root, words[i]);
    }

    // Search for specific words
    const char* searchWords[] = {"banana", "cat", "dog", "elephant", "fish"};
    int numSearchWords = sizeof(searchWords) / sizeof(searchWords[0]);

    for (int i = 0; i < numSearchWords; i++) {
        if (search(root, searchWords[i])) {
            printf("'%s' found in the Trie\n", searchWords[i]);
        } else {
            printf("'%s' not found in the Trie\n", searchWords[i]);
        }
    }

    return 0;
}
